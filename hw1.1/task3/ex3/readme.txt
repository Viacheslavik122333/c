main_slow_sort_3.c: 
В нем происходит весь процесс сортировки и процесс проверки
Длина массивов задается в отдельном массиве (в начале кода): quantity[5] - его можно изменить в коде (что бы долго не ждать)
У вас даны другие длины массива, но на этой медленной сортировке даже такие {1e4, 2*1e4, 4*1e4, 8*1e4, 1e5} сортируются достаточно долго 
(Sort3 с 10^5 элементов сортируется ~ 33 ceк)
Числа в массив заполняются: for(int i = 0; i<quantity[r]; i++){array[i] = ((rand())/((double)(RAND_MAX))) * 2*G - G;}
т.е. берутся рандомные вещественные числа (от -1e6 до 1e6)
После каждой сортировки массив проверяется, если сортировка не правильная, то он выдаст ошибку и покажет в какой сортировке 
Число для srand вводится с клавиатуры. 

Sieving_sorting_3.c:
В нем все 3 реализации сортировки просеиванием (нисходящей пузырьковой) и функции сравнения для некоторых из них 

table.c:
Выводит табличку с результати сортировки (временем работы каждой)
Результаты записываются в массив: res[20] и передаются в эту функцию

task3.h:
обычный хедр

makefile:
В нем стоят ключи мех-мата
make - компиляция
./app - запуск программы 
make cl - удаление .o и .dSYM файлов

Также можно компилировать: gcc -o app main_slow_sort_3.c table.c Sieving_sorting_3.c -g 

